// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
import { selectBestExpert } from '../src/lib/expertSelector';
import { testTripGuides, testExperts } from './expert-selection-test-data';

interface TestResult {
  testId: string;
  flowType: string;
  expectedMatches: string[];
  actualResult: string | string[];
  success: boolean;
  accuracy: number;
  error?: string;
}

// –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
const expectedResults: Record<string, string[]> = {
  'test-1-nepal': ['expert-nepal-1'],
  'test-2-indonesia': ['expert-diving-1'],
  'test-3-berlin': ['expert-berlin-1'],
  'test-4-utah-parks': ['expert-utah-1'],
  'test-5-japan-skiing': ['expert-japan-ski-1'],
  
  'test-6-winter-escape': ['expert-patagonia-1', 'expert-morocco-1', 'expert-thailand-1'],
  'test-7-summer-active': ['expert-norway-1', 'expert-romania-1', 'expert-scotland-1'],
  'test-8-family-adventure': ['expert-australia-1', 'expert-costarica-1', 'expert-newzealand-1'],
  'test-9-cultural-immersion': ['expert-uzbekistan-1', 'expert-ethiopia-1', 'expert-bhutan-1'],
  'test-10-autumn-colors': ['expert-japanese-alps-1', 'expert-canadian-rockies-1', 'expert-european-alps-1']
};

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
 */
function calculateAccuracy(expected: string[], actual: string | string[]): number {
  const actualArray = Array.isArray(actual) ? actual : [actual];
  
  if (expected.length !== actualArray.length) {
    return 0;
  }

  let matches = 0;
  for (const expectedId of expected) {
    if (actualArray.includes(expectedId)) {
      matches++;
    }
  }

  return (matches / expected.length) * 100;
}

/**
 * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
 */
export async function runAllTests(): Promise<TestResult[]> {
  const results: TestResult[] = [];

  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤...\n');

  for (const tripGuide of testTripGuides) {
    console.log(`–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${tripGuide.title} (${tripGuide.flowType})`);
    
    try {
      const result = await selectBestExpert(tripGuide, testExperts);
      const expected = expectedResults[tripGuide.id];
      const accuracy = calculateAccuracy(expected, result.selectedExpertIds);

      const testResult: TestResult = {
        testId: tripGuide.id,
        flowType: tripGuide.flowType,
        expectedMatches: expected,
        actualResult: result.selectedExpertIds,
        success: result.success,
        accuracy,
        error: result.error
      };

      results.push(testResult);

      console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${JSON.stringify(result.selectedExpertIds)}`);
      console.log(`üìä –¢–æ—á–Ω–æ—Å—Ç—å: ${accuracy}%\n`);

    } catch (error) {
      const testResult: TestResult = {
        testId: tripGuide.id,
        flowType: tripGuide.flowType,
        expectedMatches: expectedResults[tripGuide.id],
        actualResult: 'ERROR',
        success: false,
        accuracy: 0,
        error: error instanceof Error ? error.message : 'Unknown error'
      };

      results.push(testResult);
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${testResult.error}\n`);
    }
  }

  return results;
}

/**
 * –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export function analyzeResults(results: TestResult[]): {
  overallAccuracy: number;
  successRate: number;
  iKnowWhereAccuracy: number;
  inspireMeAccuracy: number;
  detailedAnalysis: string;
} {
  const totalTests = results.length;
  const successfulTests = results.filter(r => r.success).length;
  const totalAccuracy = results.reduce((sum, r) => sum + r.accuracy, 0) / totalTests;

  const iKnowWhereResults = results.filter(r => r.flowType === 'i-know-where');
  const inspireMeResults = results.filter(r => r.flowType === 'inspire-me');

  const iKnowWhereAccuracy = iKnowWhereResults.reduce((sum, r) => sum + r.accuracy, 0) / iKnowWhereResults.length;
  const inspireMeAccuracy = inspireMeResults.reduce((sum, r) => sum + r.accuracy, 0) / inspireMeResults.length;

  let detailedAnalysis = 'üìã –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:\n\n';
  
  // –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º –ø–æ—Ç–æ–∫–æ–≤
  detailedAnalysis += `üéØ I KNOW WHERE TO GO (${iKnowWhereResults.length} —Ç–µ—Å—Ç–æ–≤):\n`;
  iKnowWhereResults.forEach(r => {
    detailedAnalysis += `  ‚Ä¢ ${r.testId}: ${r.accuracy}% (–æ–∂–∏–¥–∞–ª–∏: ${r.expectedMatches[0]}, –ø–æ–ª—É—á–∏–ª–∏: ${r.actualResult})\n`;
  });

  detailedAnalysis += `\nüåü INSPIRE ME (${inspireMeResults.length} —Ç–µ—Å—Ç–æ–≤):\n`;
  inspireMeResults.forEach(r => {
    detailedAnalysis += `  ‚Ä¢ ${r.testId}: ${r.accuracy}%\n`;
    detailedAnalysis += `    –û–∂–∏–¥–∞–ª–∏: [${r.expectedMatches.join(', ')}]\n`;
    detailedAnalysis += `    –ü–æ–ª—É—á–∏–ª–∏: ${JSON.stringify(r.actualResult)}\n\n`;
  });

  // –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫
  const errors = results.filter(r => !r.success);
  if (errors.length > 0) {
    detailedAnalysis += `‚ùå –û–®–ò–ë–ö–ò (${errors.length}):\n`;
    errors.forEach(r => {
      detailedAnalysis += `  ‚Ä¢ ${r.testId}: ${r.error}\n`;
    });
  }

  return {
    overallAccuracy: totalAccuracy,
    successRate: (successfulTests / totalTests) * 100,
    iKnowWhereAccuracy,
    inspireMeAccuracy,
    detailedAnalysis
  };
}

/**
 * –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
 */
export function generateRecommendations(results: TestResult[]): string {
  let recommendations = 'üîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:\n\n';

  const lowAccuracyTests = results.filter(r => r.accuracy < 80);
  const failedTests = results.filter(r => !r.success);

  // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é
  if (lowAccuracyTests.length > 0) {
    recommendations += `üìâ –ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å (${lowAccuracyTests.length} —Ç–µ—Å—Ç–æ–≤):\n`;
    lowAccuracyTests.forEach(r => {
      recommendations += `  ‚Ä¢ ${r.testId}: ${r.accuracy}% - —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞\n`;
    });
    recommendations += '\n';
  }

  // –ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
  if (failedTests.length > 0) {
    recommendations += `‚ö†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã (${failedTests.length}):\n`;
    failedTests.forEach(r => {
      recommendations += `  ‚Ä¢ ${r.testId}: ${r.error}\n`;
    });
    recommendations += '\n';
  }

  // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  recommendations += 'üí° –ö–û–ù–ö–†–ï–¢–ù–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø:\n\n';
  
  recommendations += '1. **–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞**:\n';
  recommendations += '   - –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ø—Ä–∏–º–µ—Ä–æ–≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π\n';
  recommendations += '   - –£—Å–∏–ª–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –¥–ª—è Inspire Me –ø–æ—Ç–æ–∫–∞\n';
  recommendations += '   - –î–æ–±–∞–≤–∏—Ç—å fallback –ª–æ–≥–∏–∫—É –¥–ª—è –Ω–µ—á–µ—Ç–∫–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π\n\n';

  recommendations += '2. **–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫**:\n';
  recommendations += '   - –î–æ–±–∞–≤–∏—Ç—å retry –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è API –æ—à–∏–±–æ–∫\n';
  recommendations += '   - –£–ª—É—á—à–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç OpenAI\n';
  recommendations += '   - –î–æ–±–∞–≤–∏—Ç—å fallback –Ω–∞ rule-based matching\n\n';

  recommendations += '3. **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏**:\n';
  recommendations += '   - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø–æ—Ö–æ–∂–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n';
  recommendations += '   - –ë–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Inspire Me –ø–æ—Ç–æ–∫–∞\n';
  recommendations += '   - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞\n\n';

  return recommendations;
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  runAllTests().then(results => {
    const analysis = analyzeResults(results);
    const recommendations = generateRecommendations(results);

    console.log('\nüéØ –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
    console.log(`–û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: ${analysis.overallAccuracy.toFixed(1)}%`);
    console.log(`–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${analysis.successRate.toFixed(1)}%`);
    console.log(`I Know Where: ${analysis.iKnowWhereAccuracy.toFixed(1)}%`);
    console.log(`Inspire Me: ${analysis.inspireMeAccuracy.toFixed(1)}%`);

    console.log('\n' + analysis.detailedAnalysis);
    console.log(recommendations);
  });
}