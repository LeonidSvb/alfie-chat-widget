/**
 * –°–∏—Å—Ç–µ–º–∞ –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª–µ–π
 * 
 * –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å –∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤,
 * –∑–∞—Ç–µ–º –≤—ã–±–∏—Ä–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞ (–∏–ª–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤) –Ω–∞ –æ—Å–Ω–æ–≤–µ:
 * 1. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è (–Ω–∞–∏–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
 * 2. –°–æ–≤–ø–∞–¥–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π 
 * 3. –ì–ª—É–±–∏–Ω—ã —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã
 * 4. –Ø–∑—ã–∫–æ–≤—ã—Ö –∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π
 * 
 * –§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –¥–≤—É–º—è –ø–æ—Ç–æ–∫–∞–º–∏:
 * - "I Know Where To Go": –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –æ–¥–Ω–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞
 * - "Inspire Me": –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏–∑ 3 ID —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ –∫–∞–∂–¥—É—é –∏–¥–µ—é)
 */

import { openai } from './openai';
import { expertSelectionPrompt } from '../../back/prompts/expert-selection-prompt';
import { SimpleExpert, fetchAllExperts } from './simpleExpertFetcher';
import { TripGuide } from '../types/tripGuide';

export interface ExpertSelectionRequest {
  tripGuide: TripGuide;
  experts: SimpleExpert[];
}

export interface ExpertSelectionResult {
  success: boolean;
  selectedExpertIds: string | string[];
  error?: string;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
 * 
 * @param tripGuide - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å (—Å–æ–¥–µ—Ä–∂–∏—Ç flowType –∏ content)
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Å ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞ –∏–ª–∏ –º–∞—Å—Å–∏–≤–æ–º ID —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
 */
export async function selectBestExpert(
  tripGuide: TripGuide
): Promise<ExpertSelectionResult> {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!tripGuide || !tripGuide.content) {
      throw new Error('Trip guide content is required');
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∏–∑ Airtable
    const experts = await fetchAllExperts();
    
    if (!experts || experts.length === 0) {
      throw new Error('No experts available in database');
    }

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI
    const expertsList = experts.map(expert => ({
      id: expert.id,
      profession: expert.profession,
      bio: expert.oneline_bio
    }));

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
    const prompt = `${expertSelectionPrompt}

üó∫Ô∏è TRIP GUIDE TO ANALYZE:
Flow Type: ${tripGuide.flowType}
Content: ${tripGuide.content}

üë• AVAILABLE EXPERTS:
${expertsList.map(expert => 
  `ID: ${expert.id} | Profession: ${expert.profession} | Bio: ${expert.bio}`
).join('\n')}

Select the best expert(s) and return only the ID(s) in the specified format.`;

    // –ó–∞–ø—Ä–æ—Å –∫ OpenAI
    const completion = await openai.chat.completions.create({
      model: 'gpt-4',
      messages: [
        {
          role: 'system',
          content: 'You are an expert matching system. Follow the instructions precisely and return only the requested format.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      temperature: 0.1, // –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      max_tokens: 100 // –ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç —Å —Ç–æ–ª—å–∫–æ ID
    });

    const result = completion.choices[0]?.message?.content?.trim();

    if (!result) {
      throw new Error('No response from AI expert selection');
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ—Ç–æ–∫–∞
    let selectedExpertIds: string | string[];

    if (tripGuide.flowType === 'i-know-where') {
      // –î–ª—è "I Know Where To Go" –æ–∂–∏–¥–∞–µ–º –æ–¥–∏–Ω ID
      selectedExpertIds = result.replace(/[`"]/g, '').trim();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ID —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
      if (selectedExpertIds !== 'NO_MATCH' && !experts.find(e => e.id === selectedExpertIds)) {
        throw new Error(`Selected expert ID ${selectedExpertIds} not found in experts list`);
      }
    } else if (tripGuide.flowType === 'inspire-me') {
      // –î–ª—è "Inspire Me" –æ–∂–∏–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–∑ 3 ID
      try {
        selectedExpertIds = JSON.parse(result);
        
        if (!Array.isArray(selectedExpertIds) || selectedExpertIds.length !== 3) {
          throw new Error('Expected array of 3 expert IDs for inspire-me flow');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ ID —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã
        const uniqueIds = new Set(selectedExpertIds);
        if (uniqueIds.size !== 3) {
          throw new Error('Expert IDs must be unique');
        }

        for (const id of selectedExpertIds) {
          if (!experts.find(e => e.id === id)) {
            throw new Error(`Selected expert ID ${id} not found in experts list`);
          }
        }
      } catch (parseError) {
        throw new Error(`Failed to parse expert IDs array: ${parseError}`);
      }
    } else {
      throw new Error(`Unsupported flow type: ${tripGuide.flowType}`);
    }

    console.log(`Expert selection successful for ${tripGuide.flowType}:`, selectedExpertIds);

    return {
      success: true,
      selectedExpertIds
    };

  } catch (error) {
    console.error('Expert selection error:', error);
    
    return {
      success: false,
      selectedExpertIds: tripGuide.flowType === 'inspire-me' ? [] : 'NO_MATCH',
      error: error instanceof Error ? error.message : 'Unknown error occurred'
    };
  }
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
 * 
 * @param selectedIds - ID –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
 * @param experts - –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
 * @returns –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 */
export function getSelectedExpertsDetails(
  selectedIds: string | string[], 
  experts: SimpleExpert[]
): SimpleExpert[] {
  const idsArray = Array.isArray(selectedIds) ? selectedIds : [selectedIds];
  
  return idsArray
    .filter(id => id !== 'NO_MATCH')
    .map(id => experts.find(expert => expert.id === id))
    .filter((expert): expert is SimpleExpert => expert !== undefined);
}