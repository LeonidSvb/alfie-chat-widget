/**
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π —Å –≤—ã–±–æ—Ä–æ–º —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
 * 
 * –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ –ø–æ–¥–±–æ—Ä —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –≤ –æ–¥–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ,
 * –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
 * 
 * Workflow:
 * 1. –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é TripGuide (OpenAI)
 * 2. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ: –∑–∞–≥—Ä—É–∑–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∏–∑ Airtable
 * 3. –ö–∞–∫ —Ç–æ–ª—å–∫–æ TripGuide –≥–æ—Ç–æ–≤ ‚Üí –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
 * 4. –í–æ–∑–≤—Ä–∞—Ç –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å + –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —ç–∫—Å–ø–µ—Ä—Ç—ã
 */

import { generateInspireGuide, generatePlanningGuide } from './tripGuideGenerator';
import { selectBestExpert } from './expertSelector';
import { fetchAllExperts } from './simpleExpertFetcher';
import { TripGuide } from '../types/tripGuide';
import { QuestionnaireData } from '../types/questionnaire';

export interface IntegratedTripResult {
  success: boolean;
  tripGuide?: TripGuide;
  selectedExpertIds?: string | string[];
  error?: string;
  timing?: {
    tripGuideGeneration: number;
    expertSelection: number;
    total: number;
  };
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏
 * 
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ:
 * - –ì–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è
 * - –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É —Å–ø–∏—Å–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
 * 
 * –ó–∞—Ç–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–¥–±–∏—Ä–∞–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–æ—Ç–æ–≤–æ–≥–æ –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è
 */
export async function generateTripWithExperts(
  questionnaireData: QuestionnaireData
): Promise<IntegratedTripResult> {
  const startTime = Date.now();
  
  try {
    console.log(`üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (${questionnaireData.flowType})`);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ: –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è + –∑–∞–≥—Ä—É–∑–∫—É —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
    const [tripGuideResult, expertsResult] = await Promise.allSettled([
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è
      questionnaireData.flowType === 'inspire-me' 
        ? generateInspireGuide(questionnaireData.answers)
        : generatePlanningGuide(questionnaireData.answers),
      
      // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∏–∑ Airtable
      fetchAllExperts()
    ]);

    const tripGuideTime = Date.now() - startTime;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è
    if (tripGuideResult.status === 'rejected') {
      throw new Error(`Trip guide generation failed: ${tripGuideResult.reason}`);
    }

    const tripGuide = tripGuideResult.value;
    console.log(`‚úÖ TripGuide –≥–æ—Ç–æ–≤ (${tripGuideTime}ms): ${tripGuide.title}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
    if (expertsResult.status === 'rejected') {
      console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–æ–≤: ${expertsResult.reason}`);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å –±–µ–∑ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
      return {
        success: true,
        tripGuide,
        selectedExpertIds: questionnaireData.flowType === 'inspire-me' ? [] : 'NO_EXPERTS',
        error: 'Experts unavailable - guide generated successfully',
        timing: {
          tripGuideGeneration: tripGuideTime,
          expertSelection: 0,
          total: Date.now() - startTime
        }
      };
    }

    const experts = expertsResult.value;
    console.log(`‚úÖ –≠–∫—Å–ø–µ—Ä—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${experts.length} –¥–æ—Å—Ç—É–ø–Ω–æ`);

    // –¢–µ–ø–µ—Ä—å –±—ã—Å—Ç—Ä–æ –ø–æ–¥–±–∏—Ä–∞–µ–º —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–æ—Ç–æ–≤–æ–≥–æ –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è
    const expertSelectionStart = Date.now();
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è AI
    const expertsList = experts.map(expert => ({
      id: expert.id,
      profession: expert.profession,
      bio: expert.oneline_bio
    }));

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
    const { expertSelectionPrompt } = await import('../../back/prompts/expert-selection-prompt');
    const { openai } = await import('./openai');

    const prompt = `${expertSelectionPrompt}

üó∫Ô∏è TRIP GUIDE TO ANALYZE:
Flow Type: ${tripGuide.flowType}
Content: ${tripGuide.content}

üë• AVAILABLE EXPERTS:
${expertsList.map(expert => 
  `ID: ${expert.id} | Profession: ${expert.profession} | Bio: ${expert.bio}`
).join('\n')}

Select the best expert(s) and return only the ID(s) in the specified format.`;

    // –ó–∞–ø—Ä–æ—Å –∫ OpenAI –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
    const completion = await openai.chat.completions.create({
      model: 'gpt-4',
      messages: [
        {
          role: 'system',
          content: 'You are an expert matching system. Follow the instructions precisely and return only the requested format.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      temperature: 0.1,
      max_tokens: 100
    });

    const result = completion.choices[0]?.message?.content?.trim();
    const expertSelectionTime = Date.now() - expertSelectionStart;

    if (!result) {
      throw new Error('No response from AI expert selection');
    }

    // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ—Ç–æ–∫–∞
    let selectedExpertIds: string | string[];

    if (tripGuide.flowType === 'i-know-where') {
      selectedExpertIds = result.replace(/[`"]/g, '').trim();
      
      if (selectedExpertIds !== 'NO_MATCH' && !experts.find(e => e.id === selectedExpertIds)) {
        throw new Error(`Selected expert ID ${selectedExpertIds} not found`);
      }
    } else {
      selectedExpertIds = JSON.parse(result);
      
      if (!Array.isArray(selectedExpertIds) || selectedExpertIds.length !== 3) {
        throw new Error('Expected array of 3 expert IDs for inspire-me flow');
      }

      const uniqueIds = new Set(selectedExpertIds);
      if (uniqueIds.size !== 3) {
        throw new Error('Expert IDs must be unique');
      }

      for (const id of selectedExpertIds) {
        if (!experts.find(e => e.id === id)) {
          throw new Error(`Selected expert ID ${id} not found`);
        }
      }
    }

    const totalTime = Date.now() - startTime;
    
    console.log(`‚úÖ –≠–∫—Å–ø–µ—Ä—Ç—ã –ø–æ–¥–æ–±—Ä–∞–Ω—ã (${expertSelectionTime}ms):`, selectedExpertIds);
    console.log(`üèÅ –ü–æ–ª–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${totalTime}ms`);

    return {
      success: true,
      tripGuide,
      selectedExpertIds,
      timing: {
        tripGuideGeneration: tripGuideTime,
        expertSelection: expertSelectionTime,
        total: totalTime
      }
    };

  } catch (error) {
    const totalTime = Date.now() - startTime;
    console.error('Integrated trip planning error:', error);
    
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error occurred',
      timing: {
        tripGuideGeneration: 0,
        expertSelection: 0,
        total: totalTime
      }
    };
  }
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
 */
export async function getSelectedExpertsDetails(selectedIds: string | string[]) {
  const experts = await fetchAllExperts();
  const idsArray = Array.isArray(selectedIds) ? selectedIds : [selectedIds];
  
  return idsArray
    .filter(id => id !== 'NO_MATCH' && id !== 'NO_EXPERTS')
    .map(id => experts.find(expert => expert.id === id))
    .filter(expert => expert !== undefined);
}