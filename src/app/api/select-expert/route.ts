import { NextRequest, NextResponse } from 'next/server';
import { selectBestExpert } from '@/lib/expertSelector';
import { fetchAllExperts } from '@/lib/simpleExpertFetcher';
import { TripGuide } from '@/types/tripGuide';

export interface SelectExpertRequest {
  tripGuide: TripGuide;
}

export interface SelectExpertResponse {
  success: boolean;
  selectedExpertIds?: string | string[];
  error?: string;
  errorType?: string;
}

/**
 * API endpoint –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è
 * 
 * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç:
 * - tripGuide: –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è (–≤–∫–ª—é—á–∞—è flowType –∏ content)
 * 
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
 * - –î–ª—è "i-know-where": –æ–¥–∏–Ω ID —ç–∫—Å–ø–µ—Ä—Ç–∞ (string)
 * - –î–ª—è "inspire-me": –º–∞—Å—Å–∏–≤ –∏–∑ 3 ID —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ (string[])
 */
export async function POST(request: NextRequest): Promise<NextResponse<SelectExpertResponse>> {
  try {
    const body = await request.json() as SelectExpertRequest;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!body.tripGuide) {
      return NextResponse.json(
        {
          success: false,
          error: 'Missing required field: tripGuide',
          errorType: 'validation_error'
        },
        { status: 400 }
      );
    }

    if (!body.tripGuide.flowType || !body.tripGuide.content) {
      return NextResponse.json(
        {
          success: false,
          error: 'Trip guide must contain flowType and content',
          errorType: 'validation_error'
        },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å flowType
    if (!['inspire-me', 'i-know-where'].includes(body.tripGuide.flowType)) {
      return NextResponse.json(
        {
          success: false,
          error: 'Invalid flowType. Must be "inspire-me" or "i-know-where"',
          errorType: 'validation_error'
        },
        { status: 400 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
    const experts = await fetchAllExperts();

    if (experts.length === 0) {
      return NextResponse.json(
        {
          success: false,
          error: 'No experts available for selection',
          errorType: 'no_experts'
        },
        { status: 404 }
      );
    }

    // –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
    const selectionResult = await selectBestExpert(body.tripGuide, experts);

    if (!selectionResult.success) {
      return NextResponse.json(
        {
          success: false,
          error: selectionResult.error || 'Expert selection failed',
          errorType: 'selection_error'
        },
        { status: 500 }
      );
    }

    return NextResponse.json({
      success: true,
      selectedExpertIds: selectionResult.selectedExpertIds
    });

  } catch (error) {
    console.error('Expert selection API error:', error);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
    if (error instanceof Error) {
      // –û—à–∏–±–∫–∏ OpenAI quota/billing
      if (error.message.includes('quota') || error.message.includes('insufficient_quota')) {
        return NextResponse.json(
          {
            success: false,
            error: 'üè¶ OpenAI quota exceeded. Please check your billing and plan details.',
            errorType: 'quota_exceeded'
          },
          { status: 429 }
        );
      }
      
      // –û—à–∏–±–∫–∏ rate limiting OpenAI
      if (error.message.includes('rate limit') || error.message.includes('429')) {
        return NextResponse.json(
          {
            success: false,
            error: '‚è≥ Service temporarily busy. Please try again in a few moments.',
            errorType: 'rate_limited'
          },
          { status: 429 }
        );
      }
      
      // –û—à–∏–±–∫–∏ API –∫–ª—é—á–∞ OpenAI
      if (error.message.includes('API key') || error.message.includes('unauthorized')) {
        return NextResponse.json(
          {
            success: false,
            error: 'üîë API configuration issue. Please contact support.',
            errorType: 'auth_error'
          },
          { status: 401 }
        );
      }

      // –û—à–∏–±–∫–∏ Airtable
      if (error.message.includes('Airtable') || error.message.includes('AIRTABLE')) {
        return NextResponse.json(
          {
            success: false,
            error: 'üìä Expert database temporarily unavailable. Please try again later.',
            errorType: 'database_error'
          },
          { status: 503 }
        );
      }
      
      // –°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
      if (error.message.includes('network') || error.message.includes('timeout')) {
        return NextResponse.json(
          {
            success: false,
            error: 'üåê Network connectivity issue. Please check your connection and try again.',
            errorType: 'network_error'
          },
          { status: 503 }
        );
      }
    }
    
    return NextResponse.json(
      {
        success: false,
        error: '‚ùå An unexpected error occurred during expert selection. Please try again.',
        errorType: 'unknown'
      },
      { status: 500 }
    );
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤
export async function GET() {
  return NextResponse.json(
    { error: 'Method not allowed. Use POST to select experts.' },
    { status: 405 }
  );
}