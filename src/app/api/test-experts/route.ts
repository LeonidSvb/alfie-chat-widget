import { NextRequest, NextResponse } from 'next/server';
import { fetchAllExperts } from '@/lib/simpleExpertFetcher';

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∏–∑ Airtable
 */
export async function GET() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∏–∑ Airtable...');
    
    const experts = await fetchAllExperts();
    
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤: ${experts.length}`);
    
    return NextResponse.json({
      success: true,
      count: experts.length,
      experts: experts.slice(0, 5), // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 5 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
      sample: experts.length > 0 ? {
        id: experts[0].id,
        profession: experts[0].profession,
        bio_preview: experts[0].oneline_bio?.substring(0, 100) + '...'
      } : null
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤:', error);
    
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
      details: error instanceof Error ? error.stack : null
    }, { status: 500 });
  }
}