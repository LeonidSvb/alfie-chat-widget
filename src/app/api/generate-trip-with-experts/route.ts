import { NextRequest, NextResponse } from 'next/server';
import { generateTripWithExperts, IntegratedTripResult } from '@/lib/integratedTripPlannerWithExperts';
import { QuestionnaireData } from '@/types/questionnaire';

/**
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API endpoint –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è + –ø–æ–¥–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
 * 
 * –≠—Ç–æ—Ç endpoint –∑–∞–º–µ–Ω—è–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã /api/generate-trip-guide –∏ /api/select-expert
 * –æ–¥–Ω–∏–º –±—ã—Å—Ç—Ä—ã–º –∑–∞–ø—Ä–æ—Å–æ–º —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π.
 * 
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
 * - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å
 * - ID –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
 * - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 */
export async function POST(request: NextRequest): Promise<NextResponse<IntegratedTripResult>> {
  try {
    const body = await request.json() as QuestionnaireData;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!body.flowType || !body.answers) {
      return NextResponse.json(
        {
          success: false,
          error: 'Missing required fields: flowType or answers'
        },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –ø–æ—Ç–æ–∫–∞
    if (!['inspire-me', 'i-know-where'].includes(body.flowType)) {
      return NextResponse.json(
        {
          success: false,
          error: 'Invalid flow type. Must be "inspire-me" or "i-know-where"'
        },
        { status: 400 }
      );
    }

    console.log(`üöÄ –ó–∞–ø—Ä–æ—Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${body.flowType}`);

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è + –ø–æ–¥–±–æ—Ä —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
    const result = await generateTripWithExperts(body);

    if (!result.success) {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ HTTP —Å—Ç–∞—Ç—É—Å–∞
      let statusCode = 500;
      let errorType = 'unknown';

      if (result.error) {
        if (result.error.includes('quota') || result.error.includes('insufficient_quota')) {
          statusCode = 429;
          errorType = 'quota_exceeded';
        } else if (result.error.includes('rate limit') || result.error.includes('429')) {
          statusCode = 429;
          errorType = 'rate_limited';
        } else if (result.error.includes('API key') || result.error.includes('unauthorized')) {
          statusCode = 401;
          errorType = 'auth_error';
        } else if (result.error.includes('network') || result.error.includes('timeout')) {
          statusCode = 503;
          errorType = 'network_error';
        } else if (result.error.includes('Airtable') || result.error.includes('database')) {
          statusCode = 503;
          errorType = 'database_error';
        }
      }

      return NextResponse.json(
        {
          success: false,
          error: result.error || 'An unexpected error occurred',
          timing: result.timing
        },
        { status: statusCode }
      );
    }

    console.log(`‚úÖ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ ${result.timing?.total}ms`);

    return NextResponse.json({
      success: true,
      tripGuide: result.tripGuide,
      selectedExpertIds: result.selectedExpertIds,
      timing: result.timing
    });

  } catch (error) {
    console.error('Integrated trip planning API error:', error);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
    if (error instanceof Error) {
      // –û—à–∏–±–∫–∏ OpenAI quota/billing
      if (error.message.includes('quota') || error.message.includes('insufficient_quota')) {
        return NextResponse.json(
          {
            success: false,
            error: 'üè¶ OpenAI quota exceeded. Please check your billing and plan details.'
          },
          { status: 429 }
        );
      }
      
      // –û—à–∏–±–∫–∏ rate limiting OpenAI
      if (error.message.includes('rate limit') || error.message.includes('429')) {
        return NextResponse.json(
          {
            success: false,
            error: '‚è≥ Service temporarily busy. Please try again in a few moments.'
          },
          { status: 429 }
        );
      }
      
      // –û—à–∏–±–∫–∏ API –∫–ª—é—á–∞ OpenAI
      if (error.message.includes('API key') || error.message.includes('unauthorized')) {
        return NextResponse.json(
          {
            success: false,
            error: 'üîë API configuration issue. Please contact support.'
          },
          { status: 401 }
        );
      }

      // –û—à–∏–±–∫–∏ Airtable
      if (error.message.includes('Airtable') || error.message.includes('database')) {
        return NextResponse.json(
          {
            success: false,
            error: 'üìä Expert database temporarily unavailable. Trip guide generated without expert matching.'
          },
          { status: 206 } // Partial content - guide –µ—Å—Ç—å, —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –Ω–µ—Ç
        );
      }
      
      // –°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
      if (error.message.includes('network') || error.message.includes('timeout')) {
        return NextResponse.json(
          {
            success: false,
            error: 'üåê Network connectivity issue. Please check your connection and try again.'
          },
          { status: 503 }
        );
      }
    }
    
    return NextResponse.json(
      {
        success: false,
        error: '‚ùå An unexpected error occurred during trip planning. Please try again.'
      },
      { status: 500 }
    );
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤
export async function GET() {
  return NextResponse.json(
    { 
      error: 'Method not allowed. Use POST to generate trip with experts.',
      usage: {
        method: 'POST',
        endpoint: '/api/generate-trip-with-experts',
        body: {
          flowType: 'inspire-me | i-know-where',
          answers: 'QuestionnaireAnswers object'
        }
      }
    },
    { status: 405 }
  );
}